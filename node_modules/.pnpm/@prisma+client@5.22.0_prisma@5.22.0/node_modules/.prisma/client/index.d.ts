
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Testimony
 * 
 */
export type Testimony = $Result.DefaultSelection<Prisma.$TestimonyPayload>
/**
 * Model Statistic
 * 
 */
export type Statistic = $Result.DefaultSelection<Prisma.$StatisticPayload>
/**
 * Model pageConfig
 * 
 */
export type pageConfig = $Result.DefaultSelection<Prisma.$pageConfigPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const PageColors: {
  LAVENDER: 'LAVENDER',
  CORAL: 'CORAL',
  TEAL: 'TEAL',
  WARMPINK: 'WARMPINK',
  BLUE: 'BLUE',
  PURPLE: 'PURPLE'
};

export type PageColors = (typeof PageColors)[keyof typeof PageColors]


export const Language: {
  SPANISH: 'SPANISH',
  ENGLISH: 'ENGLISH',
  FRENCH: 'FRENCH'
};

export type Language = (typeof Language)[keyof typeof Language]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type PageColors = $Enums.PageColors

export const PageColors: typeof $Enums.PageColors

export type Language = $Enums.Language

export const Language: typeof $Enums.Language

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.testimony`: Exposes CRUD operations for the **Testimony** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Testimonies
    * const testimonies = await prisma.testimony.findMany()
    * ```
    */
  get testimony(): Prisma.TestimonyDelegate<ExtArgs>;

  /**
   * `prisma.statistic`: Exposes CRUD operations for the **Statistic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statistics
    * const statistics = await prisma.statistic.findMany()
    * ```
    */
  get statistic(): Prisma.StatisticDelegate<ExtArgs>;

  /**
   * `prisma.pageConfig`: Exposes CRUD operations for the **pageConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PageConfigs
    * const pageConfigs = await prisma.pageConfig.findMany()
    * ```
    */
  get pageConfig(): Prisma.pageConfigDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Testimony: 'Testimony',
    Statistic: 'Statistic',
    pageConfig: 'pageConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "testimony" | "statistic" | "pageConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Testimony: {
        payload: Prisma.$TestimonyPayload<ExtArgs>
        fields: Prisma.TestimonyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestimonyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestimonyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload>
          }
          findFirst: {
            args: Prisma.TestimonyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestimonyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload>
          }
          findMany: {
            args: Prisma.TestimonyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload>[]
          }
          create: {
            args: Prisma.TestimonyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload>
          }
          createMany: {
            args: Prisma.TestimonyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestimonyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload>[]
          }
          delete: {
            args: Prisma.TestimonyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload>
          }
          update: {
            args: Prisma.TestimonyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload>
          }
          deleteMany: {
            args: Prisma.TestimonyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestimonyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestimonyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestimonyPayload>
          }
          aggregate: {
            args: Prisma.TestimonyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestimony>
          }
          groupBy: {
            args: Prisma.TestimonyGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestimonyGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestimonyCountArgs<ExtArgs>
            result: $Utils.Optional<TestimonyCountAggregateOutputType> | number
          }
        }
      }
      Statistic: {
        payload: Prisma.$StatisticPayload<ExtArgs>
        fields: Prisma.StatisticFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatisticFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatisticFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          findFirst: {
            args: Prisma.StatisticFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatisticFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          findMany: {
            args: Prisma.StatisticFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>[]
          }
          create: {
            args: Prisma.StatisticCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          createMany: {
            args: Prisma.StatisticCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatisticCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>[]
          }
          delete: {
            args: Prisma.StatisticDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          update: {
            args: Prisma.StatisticUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          deleteMany: {
            args: Prisma.StatisticDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatisticUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StatisticUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          aggregate: {
            args: Prisma.StatisticAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatistic>
          }
          groupBy: {
            args: Prisma.StatisticGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatisticGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatisticCountArgs<ExtArgs>
            result: $Utils.Optional<StatisticCountAggregateOutputType> | number
          }
        }
      }
      pageConfig: {
        payload: Prisma.$pageConfigPayload<ExtArgs>
        fields: Prisma.pageConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pageConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pageConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload>
          }
          findFirst: {
            args: Prisma.pageConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pageConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload>
          }
          findMany: {
            args: Prisma.pageConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload>[]
          }
          create: {
            args: Prisma.pageConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload>
          }
          createMany: {
            args: Prisma.pageConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.pageConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload>[]
          }
          delete: {
            args: Prisma.pageConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload>
          }
          update: {
            args: Prisma.pageConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload>
          }
          deleteMany: {
            args: Prisma.pageConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.pageConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.pageConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pageConfigPayload>
          }
          aggregate: {
            args: Prisma.PageConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePageConfig>
          }
          groupBy: {
            args: Prisma.pageConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.pageConfigCountArgs<ExtArgs>
            result: $Utils.Optional<PageConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    testimonies: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testimonies?: boolean | UserCountOutputTypeCountTestimoniesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTestimoniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestimonyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    role: $Enums.UserRole | null
    email: string | null
    name: string | null
    country: string | null
    picture: string | null
    createdAt: Date | null
    preferredColor: $Enums.PageColors | null
    preferredLanguage: $Enums.Language | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    role: $Enums.UserRole | null
    email: string | null
    name: string | null
    country: string | null
    picture: string | null
    createdAt: Date | null
    preferredColor: $Enums.PageColors | null
    preferredLanguage: $Enums.Language | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    role: number
    email: number
    name: number
    country: number
    picture: number
    createdAt: number
    preferredColor: number
    preferredLanguage: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    role?: true
    email?: true
    name?: true
    country?: true
    picture?: true
    createdAt?: true
    preferredColor?: true
    preferredLanguage?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    role?: true
    email?: true
    name?: true
    country?: true
    picture?: true
    createdAt?: true
    preferredColor?: true
    preferredLanguage?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    role?: true
    email?: true
    name?: true
    country?: true
    picture?: true
    createdAt?: true
    preferredColor?: true
    preferredLanguage?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    role: $Enums.UserRole
    email: string
    name: string
    country: string
    picture: string | null
    createdAt: Date
    preferredColor: $Enums.PageColors
    preferredLanguage: $Enums.Language
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    email?: boolean
    name?: boolean
    country?: boolean
    picture?: boolean
    createdAt?: boolean
    preferredColor?: boolean
    preferredLanguage?: boolean
    testimonies?: boolean | User$testimoniesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    email?: boolean
    name?: boolean
    country?: boolean
    picture?: boolean
    createdAt?: boolean
    preferredColor?: boolean
    preferredLanguage?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    role?: boolean
    email?: boolean
    name?: boolean
    country?: boolean
    picture?: boolean
    createdAt?: boolean
    preferredColor?: boolean
    preferredLanguage?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testimonies?: boolean | User$testimoniesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      testimonies: Prisma.$TestimonyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.UserRole
      email: string
      name: string
      country: string
      picture: string | null
      createdAt: Date
      preferredColor: $Enums.PageColors
      preferredLanguage: $Enums.Language
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    testimonies<T extends User$testimoniesArgs<ExtArgs> = {}>(args?: Subset<T, User$testimoniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly country: FieldRef<"User", 'String'>
    readonly picture: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly preferredColor: FieldRef<"User", 'PageColors'>
    readonly preferredLanguage: FieldRef<"User", 'Language'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.testimonies
   */
  export type User$testimoniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    where?: TestimonyWhereInput
    orderBy?: TestimonyOrderByWithRelationInput | TestimonyOrderByWithRelationInput[]
    cursor?: TestimonyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestimonyScalarFieldEnum | TestimonyScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Testimony
   */

  export type AggregateTestimony = {
    _count: TestimonyCountAggregateOutputType | null
    _avg: TestimonyAvgAggregateOutputType | null
    _sum: TestimonySumAggregateOutputType | null
    _min: TestimonyMinAggregateOutputType | null
    _max: TestimonyMaxAggregateOutputType | null
  }

  export type TestimonyAvgAggregateOutputType = {
    rating: number | null
  }

  export type TestimonySumAggregateOutputType = {
    rating: number | null
  }

  export type TestimonyMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    rating: number | null
    title: string | null
    featured: boolean | null
    userEmail: string | null
  }

  export type TestimonyMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    rating: number | null
    title: string | null
    featured: boolean | null
    userEmail: string | null
  }

  export type TestimonyCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    rating: number
    title: number
    featured: number
    userEmail: number
    _all: number
  }


  export type TestimonyAvgAggregateInputType = {
    rating?: true
  }

  export type TestimonySumAggregateInputType = {
    rating?: true
  }

  export type TestimonyMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    rating?: true
    title?: true
    featured?: true
    userEmail?: true
  }

  export type TestimonyMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    rating?: true
    title?: true
    featured?: true
    userEmail?: true
  }

  export type TestimonyCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    rating?: true
    title?: true
    featured?: true
    userEmail?: true
    _all?: true
  }

  export type TestimonyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Testimony to aggregate.
     */
    where?: TestimonyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Testimonies to fetch.
     */
    orderBy?: TestimonyOrderByWithRelationInput | TestimonyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestimonyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Testimonies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Testimonies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Testimonies
    **/
    _count?: true | TestimonyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestimonyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestimonySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestimonyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestimonyMaxAggregateInputType
  }

  export type GetTestimonyAggregateType<T extends TestimonyAggregateArgs> = {
        [P in keyof T & keyof AggregateTestimony]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestimony[P]>
      : GetScalarType<T[P], AggregateTestimony[P]>
  }




  export type TestimonyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestimonyWhereInput
    orderBy?: TestimonyOrderByWithAggregationInput | TestimonyOrderByWithAggregationInput[]
    by: TestimonyScalarFieldEnum[] | TestimonyScalarFieldEnum
    having?: TestimonyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestimonyCountAggregateInputType | true
    _avg?: TestimonyAvgAggregateInputType
    _sum?: TestimonySumAggregateInputType
    _min?: TestimonyMinAggregateInputType
    _max?: TestimonyMaxAggregateInputType
  }

  export type TestimonyGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    rating: number
    title: string | null
    featured: boolean
    userEmail: string
    _count: TestimonyCountAggregateOutputType | null
    _avg: TestimonyAvgAggregateOutputType | null
    _sum: TestimonySumAggregateOutputType | null
    _min: TestimonyMinAggregateOutputType | null
    _max: TestimonyMaxAggregateOutputType | null
  }

  type GetTestimonyGroupByPayload<T extends TestimonyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestimonyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestimonyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestimonyGroupByOutputType[P]>
            : GetScalarType<T[P], TestimonyGroupByOutputType[P]>
        }
      >
    >


  export type TestimonySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    rating?: boolean
    title?: boolean
    featured?: boolean
    userEmail?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testimony"]>

  export type TestimonySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    rating?: boolean
    title?: boolean
    featured?: boolean
    userEmail?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testimony"]>

  export type TestimonySelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    rating?: boolean
    title?: boolean
    featured?: boolean
    userEmail?: boolean
  }

  export type TestimonyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TestimonyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TestimonyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Testimony"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      rating: number
      title: string | null
      featured: boolean
      userEmail: string
    }, ExtArgs["result"]["testimony"]>
    composites: {}
  }

  type TestimonyGetPayload<S extends boolean | null | undefined | TestimonyDefaultArgs> = $Result.GetResult<Prisma.$TestimonyPayload, S>

  type TestimonyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TestimonyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TestimonyCountAggregateInputType | true
    }

  export interface TestimonyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Testimony'], meta: { name: 'Testimony' } }
    /**
     * Find zero or one Testimony that matches the filter.
     * @param {TestimonyFindUniqueArgs} args - Arguments to find a Testimony
     * @example
     * // Get one Testimony
     * const testimony = await prisma.testimony.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestimonyFindUniqueArgs>(args: SelectSubset<T, TestimonyFindUniqueArgs<ExtArgs>>): Prisma__TestimonyClient<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Testimony that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TestimonyFindUniqueOrThrowArgs} args - Arguments to find a Testimony
     * @example
     * // Get one Testimony
     * const testimony = await prisma.testimony.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestimonyFindUniqueOrThrowArgs>(args: SelectSubset<T, TestimonyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestimonyClient<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Testimony that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestimonyFindFirstArgs} args - Arguments to find a Testimony
     * @example
     * // Get one Testimony
     * const testimony = await prisma.testimony.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestimonyFindFirstArgs>(args?: SelectSubset<T, TestimonyFindFirstArgs<ExtArgs>>): Prisma__TestimonyClient<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Testimony that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestimonyFindFirstOrThrowArgs} args - Arguments to find a Testimony
     * @example
     * // Get one Testimony
     * const testimony = await prisma.testimony.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestimonyFindFirstOrThrowArgs>(args?: SelectSubset<T, TestimonyFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestimonyClient<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Testimonies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestimonyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Testimonies
     * const testimonies = await prisma.testimony.findMany()
     * 
     * // Get first 10 Testimonies
     * const testimonies = await prisma.testimony.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testimonyWithIdOnly = await prisma.testimony.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestimonyFindManyArgs>(args?: SelectSubset<T, TestimonyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Testimony.
     * @param {TestimonyCreateArgs} args - Arguments to create a Testimony.
     * @example
     * // Create one Testimony
     * const Testimony = await prisma.testimony.create({
     *   data: {
     *     // ... data to create a Testimony
     *   }
     * })
     * 
     */
    create<T extends TestimonyCreateArgs>(args: SelectSubset<T, TestimonyCreateArgs<ExtArgs>>): Prisma__TestimonyClient<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Testimonies.
     * @param {TestimonyCreateManyArgs} args - Arguments to create many Testimonies.
     * @example
     * // Create many Testimonies
     * const testimony = await prisma.testimony.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestimonyCreateManyArgs>(args?: SelectSubset<T, TestimonyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Testimonies and returns the data saved in the database.
     * @param {TestimonyCreateManyAndReturnArgs} args - Arguments to create many Testimonies.
     * @example
     * // Create many Testimonies
     * const testimony = await prisma.testimony.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Testimonies and only return the `id`
     * const testimonyWithIdOnly = await prisma.testimony.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestimonyCreateManyAndReturnArgs>(args?: SelectSubset<T, TestimonyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Testimony.
     * @param {TestimonyDeleteArgs} args - Arguments to delete one Testimony.
     * @example
     * // Delete one Testimony
     * const Testimony = await prisma.testimony.delete({
     *   where: {
     *     // ... filter to delete one Testimony
     *   }
     * })
     * 
     */
    delete<T extends TestimonyDeleteArgs>(args: SelectSubset<T, TestimonyDeleteArgs<ExtArgs>>): Prisma__TestimonyClient<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Testimony.
     * @param {TestimonyUpdateArgs} args - Arguments to update one Testimony.
     * @example
     * // Update one Testimony
     * const testimony = await prisma.testimony.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestimonyUpdateArgs>(args: SelectSubset<T, TestimonyUpdateArgs<ExtArgs>>): Prisma__TestimonyClient<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Testimonies.
     * @param {TestimonyDeleteManyArgs} args - Arguments to filter Testimonies to delete.
     * @example
     * // Delete a few Testimonies
     * const { count } = await prisma.testimony.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestimonyDeleteManyArgs>(args?: SelectSubset<T, TestimonyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Testimonies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestimonyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Testimonies
     * const testimony = await prisma.testimony.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestimonyUpdateManyArgs>(args: SelectSubset<T, TestimonyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Testimony.
     * @param {TestimonyUpsertArgs} args - Arguments to update or create a Testimony.
     * @example
     * // Update or create a Testimony
     * const testimony = await prisma.testimony.upsert({
     *   create: {
     *     // ... data to create a Testimony
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Testimony we want to update
     *   }
     * })
     */
    upsert<T extends TestimonyUpsertArgs>(args: SelectSubset<T, TestimonyUpsertArgs<ExtArgs>>): Prisma__TestimonyClient<$Result.GetResult<Prisma.$TestimonyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Testimonies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestimonyCountArgs} args - Arguments to filter Testimonies to count.
     * @example
     * // Count the number of Testimonies
     * const count = await prisma.testimony.count({
     *   where: {
     *     // ... the filter for the Testimonies we want to count
     *   }
     * })
    **/
    count<T extends TestimonyCountArgs>(
      args?: Subset<T, TestimonyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestimonyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Testimony.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestimonyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestimonyAggregateArgs>(args: Subset<T, TestimonyAggregateArgs>): Prisma.PrismaPromise<GetTestimonyAggregateType<T>>

    /**
     * Group by Testimony.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestimonyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestimonyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestimonyGroupByArgs['orderBy'] }
        : { orderBy?: TestimonyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestimonyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestimonyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Testimony model
   */
  readonly fields: TestimonyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Testimony.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestimonyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Testimony model
   */ 
  interface TestimonyFieldRefs {
    readonly id: FieldRef<"Testimony", 'String'>
    readonly content: FieldRef<"Testimony", 'String'>
    readonly createdAt: FieldRef<"Testimony", 'DateTime'>
    readonly rating: FieldRef<"Testimony", 'Int'>
    readonly title: FieldRef<"Testimony", 'String'>
    readonly featured: FieldRef<"Testimony", 'Boolean'>
    readonly userEmail: FieldRef<"Testimony", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Testimony findUnique
   */
  export type TestimonyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * Filter, which Testimony to fetch.
     */
    where: TestimonyWhereUniqueInput
  }

  /**
   * Testimony findUniqueOrThrow
   */
  export type TestimonyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * Filter, which Testimony to fetch.
     */
    where: TestimonyWhereUniqueInput
  }

  /**
   * Testimony findFirst
   */
  export type TestimonyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * Filter, which Testimony to fetch.
     */
    where?: TestimonyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Testimonies to fetch.
     */
    orderBy?: TestimonyOrderByWithRelationInput | TestimonyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Testimonies.
     */
    cursor?: TestimonyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Testimonies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Testimonies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Testimonies.
     */
    distinct?: TestimonyScalarFieldEnum | TestimonyScalarFieldEnum[]
  }

  /**
   * Testimony findFirstOrThrow
   */
  export type TestimonyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * Filter, which Testimony to fetch.
     */
    where?: TestimonyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Testimonies to fetch.
     */
    orderBy?: TestimonyOrderByWithRelationInput | TestimonyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Testimonies.
     */
    cursor?: TestimonyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Testimonies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Testimonies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Testimonies.
     */
    distinct?: TestimonyScalarFieldEnum | TestimonyScalarFieldEnum[]
  }

  /**
   * Testimony findMany
   */
  export type TestimonyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * Filter, which Testimonies to fetch.
     */
    where?: TestimonyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Testimonies to fetch.
     */
    orderBy?: TestimonyOrderByWithRelationInput | TestimonyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Testimonies.
     */
    cursor?: TestimonyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Testimonies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Testimonies.
     */
    skip?: number
    distinct?: TestimonyScalarFieldEnum | TestimonyScalarFieldEnum[]
  }

  /**
   * Testimony create
   */
  export type TestimonyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * The data needed to create a Testimony.
     */
    data: XOR<TestimonyCreateInput, TestimonyUncheckedCreateInput>
  }

  /**
   * Testimony createMany
   */
  export type TestimonyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Testimonies.
     */
    data: TestimonyCreateManyInput | TestimonyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Testimony createManyAndReturn
   */
  export type TestimonyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Testimonies.
     */
    data: TestimonyCreateManyInput | TestimonyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Testimony update
   */
  export type TestimonyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * The data needed to update a Testimony.
     */
    data: XOR<TestimonyUpdateInput, TestimonyUncheckedUpdateInput>
    /**
     * Choose, which Testimony to update.
     */
    where: TestimonyWhereUniqueInput
  }

  /**
   * Testimony updateMany
   */
  export type TestimonyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Testimonies.
     */
    data: XOR<TestimonyUpdateManyMutationInput, TestimonyUncheckedUpdateManyInput>
    /**
     * Filter which Testimonies to update
     */
    where?: TestimonyWhereInput
  }

  /**
   * Testimony upsert
   */
  export type TestimonyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * The filter to search for the Testimony to update in case it exists.
     */
    where: TestimonyWhereUniqueInput
    /**
     * In case the Testimony found by the `where` argument doesn't exist, create a new Testimony with this data.
     */
    create: XOR<TestimonyCreateInput, TestimonyUncheckedCreateInput>
    /**
     * In case the Testimony was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestimonyUpdateInput, TestimonyUncheckedUpdateInput>
  }

  /**
   * Testimony delete
   */
  export type TestimonyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
    /**
     * Filter which Testimony to delete.
     */
    where: TestimonyWhereUniqueInput
  }

  /**
   * Testimony deleteMany
   */
  export type TestimonyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Testimonies to delete
     */
    where?: TestimonyWhereInput
  }

  /**
   * Testimony without action
   */
  export type TestimonyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testimony
     */
    select?: TestimonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestimonyInclude<ExtArgs> | null
  }


  /**
   * Model Statistic
   */

  export type AggregateStatistic = {
    _count: StatisticCountAggregateOutputType | null
    _avg: StatisticAvgAggregateOutputType | null
    _sum: StatisticSumAggregateOutputType | null
    _min: StatisticMinAggregateOutputType | null
    _max: StatisticMaxAggregateOutputType | null
  }

  export type StatisticAvgAggregateOutputType = {
    id: number | null
    countries: number | null
    satisfaction: number | null
    teachers: number | null
    students: number | null
    courses: number | null
    classes: number | null
  }

  export type StatisticSumAggregateOutputType = {
    id: number | null
    countries: number | null
    satisfaction: number | null
    teachers: number | null
    students: number | null
    courses: number | null
    classes: number | null
  }

  export type StatisticMinAggregateOutputType = {
    id: number | null
    countries: number | null
    satisfaction: number | null
    teachers: number | null
    students: number | null
    courses: number | null
    classes: number | null
  }

  export type StatisticMaxAggregateOutputType = {
    id: number | null
    countries: number | null
    satisfaction: number | null
    teachers: number | null
    students: number | null
    courses: number | null
    classes: number | null
  }

  export type StatisticCountAggregateOutputType = {
    id: number
    countries: number
    satisfaction: number
    teachers: number
    students: number
    courses: number
    classes: number
    _all: number
  }


  export type StatisticAvgAggregateInputType = {
    id?: true
    countries?: true
    satisfaction?: true
    teachers?: true
    students?: true
    courses?: true
    classes?: true
  }

  export type StatisticSumAggregateInputType = {
    id?: true
    countries?: true
    satisfaction?: true
    teachers?: true
    students?: true
    courses?: true
    classes?: true
  }

  export type StatisticMinAggregateInputType = {
    id?: true
    countries?: true
    satisfaction?: true
    teachers?: true
    students?: true
    courses?: true
    classes?: true
  }

  export type StatisticMaxAggregateInputType = {
    id?: true
    countries?: true
    satisfaction?: true
    teachers?: true
    students?: true
    courses?: true
    classes?: true
  }

  export type StatisticCountAggregateInputType = {
    id?: true
    countries?: true
    satisfaction?: true
    teachers?: true
    students?: true
    courses?: true
    classes?: true
    _all?: true
  }

  export type StatisticAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statistic to aggregate.
     */
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statistics
    **/
    _count?: true | StatisticCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatisticAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatisticSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatisticMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatisticMaxAggregateInputType
  }

  export type GetStatisticAggregateType<T extends StatisticAggregateArgs> = {
        [P in keyof T & keyof AggregateStatistic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatistic[P]>
      : GetScalarType<T[P], AggregateStatistic[P]>
  }




  export type StatisticGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatisticWhereInput
    orderBy?: StatisticOrderByWithAggregationInput | StatisticOrderByWithAggregationInput[]
    by: StatisticScalarFieldEnum[] | StatisticScalarFieldEnum
    having?: StatisticScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatisticCountAggregateInputType | true
    _avg?: StatisticAvgAggregateInputType
    _sum?: StatisticSumAggregateInputType
    _min?: StatisticMinAggregateInputType
    _max?: StatisticMaxAggregateInputType
  }

  export type StatisticGroupByOutputType = {
    id: number
    countries: number
    satisfaction: number
    teachers: number
    students: number
    courses: number
    classes: number
    _count: StatisticCountAggregateOutputType | null
    _avg: StatisticAvgAggregateOutputType | null
    _sum: StatisticSumAggregateOutputType | null
    _min: StatisticMinAggregateOutputType | null
    _max: StatisticMaxAggregateOutputType | null
  }

  type GetStatisticGroupByPayload<T extends StatisticGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatisticGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatisticGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatisticGroupByOutputType[P]>
            : GetScalarType<T[P], StatisticGroupByOutputType[P]>
        }
      >
    >


  export type StatisticSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    countries?: boolean
    satisfaction?: boolean
    teachers?: boolean
    students?: boolean
    courses?: boolean
    classes?: boolean
  }, ExtArgs["result"]["statistic"]>

  export type StatisticSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    countries?: boolean
    satisfaction?: boolean
    teachers?: boolean
    students?: boolean
    courses?: boolean
    classes?: boolean
  }, ExtArgs["result"]["statistic"]>

  export type StatisticSelectScalar = {
    id?: boolean
    countries?: boolean
    satisfaction?: boolean
    teachers?: boolean
    students?: boolean
    courses?: boolean
    classes?: boolean
  }


  export type $StatisticPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Statistic"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      countries: number
      satisfaction: number
      teachers: number
      students: number
      courses: number
      classes: number
    }, ExtArgs["result"]["statistic"]>
    composites: {}
  }

  type StatisticGetPayload<S extends boolean | null | undefined | StatisticDefaultArgs> = $Result.GetResult<Prisma.$StatisticPayload, S>

  type StatisticCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatisticFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatisticCountAggregateInputType | true
    }

  export interface StatisticDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Statistic'], meta: { name: 'Statistic' } }
    /**
     * Find zero or one Statistic that matches the filter.
     * @param {StatisticFindUniqueArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatisticFindUniqueArgs>(args: SelectSubset<T, StatisticFindUniqueArgs<ExtArgs>>): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Statistic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StatisticFindUniqueOrThrowArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatisticFindUniqueOrThrowArgs>(args: SelectSubset<T, StatisticFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Statistic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticFindFirstArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatisticFindFirstArgs>(args?: SelectSubset<T, StatisticFindFirstArgs<ExtArgs>>): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Statistic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticFindFirstOrThrowArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatisticFindFirstOrThrowArgs>(args?: SelectSubset<T, StatisticFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Statistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statistics
     * const statistics = await prisma.statistic.findMany()
     * 
     * // Get first 10 Statistics
     * const statistics = await prisma.statistic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statisticWithIdOnly = await prisma.statistic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatisticFindManyArgs>(args?: SelectSubset<T, StatisticFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Statistic.
     * @param {StatisticCreateArgs} args - Arguments to create a Statistic.
     * @example
     * // Create one Statistic
     * const Statistic = await prisma.statistic.create({
     *   data: {
     *     // ... data to create a Statistic
     *   }
     * })
     * 
     */
    create<T extends StatisticCreateArgs>(args: SelectSubset<T, StatisticCreateArgs<ExtArgs>>): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Statistics.
     * @param {StatisticCreateManyArgs} args - Arguments to create many Statistics.
     * @example
     * // Create many Statistics
     * const statistic = await prisma.statistic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatisticCreateManyArgs>(args?: SelectSubset<T, StatisticCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Statistics and returns the data saved in the database.
     * @param {StatisticCreateManyAndReturnArgs} args - Arguments to create many Statistics.
     * @example
     * // Create many Statistics
     * const statistic = await prisma.statistic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Statistics and only return the `id`
     * const statisticWithIdOnly = await prisma.statistic.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatisticCreateManyAndReturnArgs>(args?: SelectSubset<T, StatisticCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Statistic.
     * @param {StatisticDeleteArgs} args - Arguments to delete one Statistic.
     * @example
     * // Delete one Statistic
     * const Statistic = await prisma.statistic.delete({
     *   where: {
     *     // ... filter to delete one Statistic
     *   }
     * })
     * 
     */
    delete<T extends StatisticDeleteArgs>(args: SelectSubset<T, StatisticDeleteArgs<ExtArgs>>): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Statistic.
     * @param {StatisticUpdateArgs} args - Arguments to update one Statistic.
     * @example
     * // Update one Statistic
     * const statistic = await prisma.statistic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatisticUpdateArgs>(args: SelectSubset<T, StatisticUpdateArgs<ExtArgs>>): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Statistics.
     * @param {StatisticDeleteManyArgs} args - Arguments to filter Statistics to delete.
     * @example
     * // Delete a few Statistics
     * const { count } = await prisma.statistic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatisticDeleteManyArgs>(args?: SelectSubset<T, StatisticDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statistics
     * const statistic = await prisma.statistic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatisticUpdateManyArgs>(args: SelectSubset<T, StatisticUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Statistic.
     * @param {StatisticUpsertArgs} args - Arguments to update or create a Statistic.
     * @example
     * // Update or create a Statistic
     * const statistic = await prisma.statistic.upsert({
     *   create: {
     *     // ... data to create a Statistic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Statistic we want to update
     *   }
     * })
     */
    upsert<T extends StatisticUpsertArgs>(args: SelectSubset<T, StatisticUpsertArgs<ExtArgs>>): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticCountArgs} args - Arguments to filter Statistics to count.
     * @example
     * // Count the number of Statistics
     * const count = await prisma.statistic.count({
     *   where: {
     *     // ... the filter for the Statistics we want to count
     *   }
     * })
    **/
    count<T extends StatisticCountArgs>(
      args?: Subset<T, StatisticCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatisticCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Statistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatisticAggregateArgs>(args: Subset<T, StatisticAggregateArgs>): Prisma.PrismaPromise<GetStatisticAggregateType<T>>

    /**
     * Group by Statistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatisticGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatisticGroupByArgs['orderBy'] }
        : { orderBy?: StatisticGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatisticGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatisticGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Statistic model
   */
  readonly fields: StatisticFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Statistic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatisticClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Statistic model
   */ 
  interface StatisticFieldRefs {
    readonly id: FieldRef<"Statistic", 'Int'>
    readonly countries: FieldRef<"Statistic", 'Int'>
    readonly satisfaction: FieldRef<"Statistic", 'Int'>
    readonly teachers: FieldRef<"Statistic", 'Int'>
    readonly students: FieldRef<"Statistic", 'Int'>
    readonly courses: FieldRef<"Statistic", 'Int'>
    readonly classes: FieldRef<"Statistic", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Statistic findUnique
   */
  export type StatisticFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Filter, which Statistic to fetch.
     */
    where: StatisticWhereUniqueInput
  }

  /**
   * Statistic findUniqueOrThrow
   */
  export type StatisticFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Filter, which Statistic to fetch.
     */
    where: StatisticWhereUniqueInput
  }

  /**
   * Statistic findFirst
   */
  export type StatisticFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Filter, which Statistic to fetch.
     */
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     */
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     */
    distinct?: StatisticScalarFieldEnum | StatisticScalarFieldEnum[]
  }

  /**
   * Statistic findFirstOrThrow
   */
  export type StatisticFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Filter, which Statistic to fetch.
     */
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     */
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     */
    distinct?: StatisticScalarFieldEnum | StatisticScalarFieldEnum[]
  }

  /**
   * Statistic findMany
   */
  export type StatisticFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Filter, which Statistics to fetch.
     */
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statistics.
     */
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    distinct?: StatisticScalarFieldEnum | StatisticScalarFieldEnum[]
  }

  /**
   * Statistic create
   */
  export type StatisticCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * The data needed to create a Statistic.
     */
    data: XOR<StatisticCreateInput, StatisticUncheckedCreateInput>
  }

  /**
   * Statistic createMany
   */
  export type StatisticCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statistics.
     */
    data: StatisticCreateManyInput | StatisticCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Statistic createManyAndReturn
   */
  export type StatisticCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Statistics.
     */
    data: StatisticCreateManyInput | StatisticCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Statistic update
   */
  export type StatisticUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * The data needed to update a Statistic.
     */
    data: XOR<StatisticUpdateInput, StatisticUncheckedUpdateInput>
    /**
     * Choose, which Statistic to update.
     */
    where: StatisticWhereUniqueInput
  }

  /**
   * Statistic updateMany
   */
  export type StatisticUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statistics.
     */
    data: XOR<StatisticUpdateManyMutationInput, StatisticUncheckedUpdateManyInput>
    /**
     * Filter which Statistics to update
     */
    where?: StatisticWhereInput
  }

  /**
   * Statistic upsert
   */
  export type StatisticUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * The filter to search for the Statistic to update in case it exists.
     */
    where: StatisticWhereUniqueInput
    /**
     * In case the Statistic found by the `where` argument doesn't exist, create a new Statistic with this data.
     */
    create: XOR<StatisticCreateInput, StatisticUncheckedCreateInput>
    /**
     * In case the Statistic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatisticUpdateInput, StatisticUncheckedUpdateInput>
  }

  /**
   * Statistic delete
   */
  export type StatisticDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Filter which Statistic to delete.
     */
    where: StatisticWhereUniqueInput
  }

  /**
   * Statistic deleteMany
   */
  export type StatisticDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statistics to delete
     */
    where?: StatisticWhereInput
  }

  /**
   * Statistic without action
   */
  export type StatisticDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
  }


  /**
   * Model pageConfig
   */

  export type AggregatePageConfig = {
    _count: PageConfigCountAggregateOutputType | null
    _avg: PageConfigAvgAggregateOutputType | null
    _sum: PageConfigSumAggregateOutputType | null
    _min: PageConfigMinAggregateOutputType | null
    _max: PageConfigMaxAggregateOutputType | null
  }

  export type PageConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type PageConfigSumAggregateOutputType = {
    id: number | null
  }

  export type PageConfigMinAggregateOutputType = {
    id: number | null
    description: string | null
    address: string | null
    phone: string | null
    email: string | null
    color: $Enums.PageColors | null
    language: $Enums.Language | null
  }

  export type PageConfigMaxAggregateOutputType = {
    id: number | null
    description: string | null
    address: string | null
    phone: string | null
    email: string | null
    color: $Enums.PageColors | null
    language: $Enums.Language | null
  }

  export type PageConfigCountAggregateOutputType = {
    id: number
    description: number
    address: number
    phone: number
    email: number
    color: number
    language: number
    _all: number
  }


  export type PageConfigAvgAggregateInputType = {
    id?: true
  }

  export type PageConfigSumAggregateInputType = {
    id?: true
  }

  export type PageConfigMinAggregateInputType = {
    id?: true
    description?: true
    address?: true
    phone?: true
    email?: true
    color?: true
    language?: true
  }

  export type PageConfigMaxAggregateInputType = {
    id?: true
    description?: true
    address?: true
    phone?: true
    email?: true
    color?: true
    language?: true
  }

  export type PageConfigCountAggregateInputType = {
    id?: true
    description?: true
    address?: true
    phone?: true
    email?: true
    color?: true
    language?: true
    _all?: true
  }

  export type PageConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pageConfig to aggregate.
     */
    where?: pageConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pageConfigs to fetch.
     */
    orderBy?: pageConfigOrderByWithRelationInput | pageConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pageConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pageConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pageConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pageConfigs
    **/
    _count?: true | PageConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PageConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PageConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageConfigMaxAggregateInputType
  }

  export type GetPageConfigAggregateType<T extends PageConfigAggregateArgs> = {
        [P in keyof T & keyof AggregatePageConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePageConfig[P]>
      : GetScalarType<T[P], AggregatePageConfig[P]>
  }




  export type pageConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pageConfigWhereInput
    orderBy?: pageConfigOrderByWithAggregationInput | pageConfigOrderByWithAggregationInput[]
    by: PageConfigScalarFieldEnum[] | PageConfigScalarFieldEnum
    having?: pageConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageConfigCountAggregateInputType | true
    _avg?: PageConfigAvgAggregateInputType
    _sum?: PageConfigSumAggregateInputType
    _min?: PageConfigMinAggregateInputType
    _max?: PageConfigMaxAggregateInputType
  }

  export type PageConfigGroupByOutputType = {
    id: number
    description: string
    address: string
    phone: string
    email: string
    color: $Enums.PageColors
    language: $Enums.Language
    _count: PageConfigCountAggregateOutputType | null
    _avg: PageConfigAvgAggregateOutputType | null
    _sum: PageConfigSumAggregateOutputType | null
    _min: PageConfigMinAggregateOutputType | null
    _max: PageConfigMaxAggregateOutputType | null
  }

  type GetPageConfigGroupByPayload<T extends pageConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageConfigGroupByOutputType[P]>
            : GetScalarType<T[P], PageConfigGroupByOutputType[P]>
        }
      >
    >


  export type pageConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    color?: boolean
    language?: boolean
  }, ExtArgs["result"]["pageConfig"]>

  export type pageConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    color?: boolean
    language?: boolean
  }, ExtArgs["result"]["pageConfig"]>

  export type pageConfigSelectScalar = {
    id?: boolean
    description?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    color?: boolean
    language?: boolean
  }


  export type $pageConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pageConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      address: string
      phone: string
      email: string
      color: $Enums.PageColors
      language: $Enums.Language
    }, ExtArgs["result"]["pageConfig"]>
    composites: {}
  }

  type pageConfigGetPayload<S extends boolean | null | undefined | pageConfigDefaultArgs> = $Result.GetResult<Prisma.$pageConfigPayload, S>

  type pageConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<pageConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PageConfigCountAggregateInputType | true
    }

  export interface pageConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pageConfig'], meta: { name: 'pageConfig' } }
    /**
     * Find zero or one PageConfig that matches the filter.
     * @param {pageConfigFindUniqueArgs} args - Arguments to find a PageConfig
     * @example
     * // Get one PageConfig
     * const pageConfig = await prisma.pageConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends pageConfigFindUniqueArgs>(args: SelectSubset<T, pageConfigFindUniqueArgs<ExtArgs>>): Prisma__pageConfigClient<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PageConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {pageConfigFindUniqueOrThrowArgs} args - Arguments to find a PageConfig
     * @example
     * // Get one PageConfig
     * const pageConfig = await prisma.pageConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends pageConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, pageConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__pageConfigClient<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PageConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pageConfigFindFirstArgs} args - Arguments to find a PageConfig
     * @example
     * // Get one PageConfig
     * const pageConfig = await prisma.pageConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends pageConfigFindFirstArgs>(args?: SelectSubset<T, pageConfigFindFirstArgs<ExtArgs>>): Prisma__pageConfigClient<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PageConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pageConfigFindFirstOrThrowArgs} args - Arguments to find a PageConfig
     * @example
     * // Get one PageConfig
     * const pageConfig = await prisma.pageConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends pageConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, pageConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__pageConfigClient<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PageConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pageConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PageConfigs
     * const pageConfigs = await prisma.pageConfig.findMany()
     * 
     * // Get first 10 PageConfigs
     * const pageConfigs = await prisma.pageConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageConfigWithIdOnly = await prisma.pageConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends pageConfigFindManyArgs>(args?: SelectSubset<T, pageConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PageConfig.
     * @param {pageConfigCreateArgs} args - Arguments to create a PageConfig.
     * @example
     * // Create one PageConfig
     * const PageConfig = await prisma.pageConfig.create({
     *   data: {
     *     // ... data to create a PageConfig
     *   }
     * })
     * 
     */
    create<T extends pageConfigCreateArgs>(args: SelectSubset<T, pageConfigCreateArgs<ExtArgs>>): Prisma__pageConfigClient<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PageConfigs.
     * @param {pageConfigCreateManyArgs} args - Arguments to create many PageConfigs.
     * @example
     * // Create many PageConfigs
     * const pageConfig = await prisma.pageConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends pageConfigCreateManyArgs>(args?: SelectSubset<T, pageConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PageConfigs and returns the data saved in the database.
     * @param {pageConfigCreateManyAndReturnArgs} args - Arguments to create many PageConfigs.
     * @example
     * // Create many PageConfigs
     * const pageConfig = await prisma.pageConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PageConfigs and only return the `id`
     * const pageConfigWithIdOnly = await prisma.pageConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends pageConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, pageConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PageConfig.
     * @param {pageConfigDeleteArgs} args - Arguments to delete one PageConfig.
     * @example
     * // Delete one PageConfig
     * const PageConfig = await prisma.pageConfig.delete({
     *   where: {
     *     // ... filter to delete one PageConfig
     *   }
     * })
     * 
     */
    delete<T extends pageConfigDeleteArgs>(args: SelectSubset<T, pageConfigDeleteArgs<ExtArgs>>): Prisma__pageConfigClient<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PageConfig.
     * @param {pageConfigUpdateArgs} args - Arguments to update one PageConfig.
     * @example
     * // Update one PageConfig
     * const pageConfig = await prisma.pageConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends pageConfigUpdateArgs>(args: SelectSubset<T, pageConfigUpdateArgs<ExtArgs>>): Prisma__pageConfigClient<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PageConfigs.
     * @param {pageConfigDeleteManyArgs} args - Arguments to filter PageConfigs to delete.
     * @example
     * // Delete a few PageConfigs
     * const { count } = await prisma.pageConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends pageConfigDeleteManyArgs>(args?: SelectSubset<T, pageConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PageConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pageConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PageConfigs
     * const pageConfig = await prisma.pageConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends pageConfigUpdateManyArgs>(args: SelectSubset<T, pageConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PageConfig.
     * @param {pageConfigUpsertArgs} args - Arguments to update or create a PageConfig.
     * @example
     * // Update or create a PageConfig
     * const pageConfig = await prisma.pageConfig.upsert({
     *   create: {
     *     // ... data to create a PageConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PageConfig we want to update
     *   }
     * })
     */
    upsert<T extends pageConfigUpsertArgs>(args: SelectSubset<T, pageConfigUpsertArgs<ExtArgs>>): Prisma__pageConfigClient<$Result.GetResult<Prisma.$pageConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PageConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pageConfigCountArgs} args - Arguments to filter PageConfigs to count.
     * @example
     * // Count the number of PageConfigs
     * const count = await prisma.pageConfig.count({
     *   where: {
     *     // ... the filter for the PageConfigs we want to count
     *   }
     * })
    **/
    count<T extends pageConfigCountArgs>(
      args?: Subset<T, pageConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PageConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageConfigAggregateArgs>(args: Subset<T, PageConfigAggregateArgs>): Prisma.PrismaPromise<GetPageConfigAggregateType<T>>

    /**
     * Group by PageConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pageConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pageConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pageConfigGroupByArgs['orderBy'] }
        : { orderBy?: pageConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pageConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pageConfig model
   */
  readonly fields: pageConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pageConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pageConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the pageConfig model
   */ 
  interface pageConfigFieldRefs {
    readonly id: FieldRef<"pageConfig", 'Int'>
    readonly description: FieldRef<"pageConfig", 'String'>
    readonly address: FieldRef<"pageConfig", 'String'>
    readonly phone: FieldRef<"pageConfig", 'String'>
    readonly email: FieldRef<"pageConfig", 'String'>
    readonly color: FieldRef<"pageConfig", 'PageColors'>
    readonly language: FieldRef<"pageConfig", 'Language'>
  }
    

  // Custom InputTypes
  /**
   * pageConfig findUnique
   */
  export type pageConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * Filter, which pageConfig to fetch.
     */
    where: pageConfigWhereUniqueInput
  }

  /**
   * pageConfig findUniqueOrThrow
   */
  export type pageConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * Filter, which pageConfig to fetch.
     */
    where: pageConfigWhereUniqueInput
  }

  /**
   * pageConfig findFirst
   */
  export type pageConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * Filter, which pageConfig to fetch.
     */
    where?: pageConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pageConfigs to fetch.
     */
    orderBy?: pageConfigOrderByWithRelationInput | pageConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pageConfigs.
     */
    cursor?: pageConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pageConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pageConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pageConfigs.
     */
    distinct?: PageConfigScalarFieldEnum | PageConfigScalarFieldEnum[]
  }

  /**
   * pageConfig findFirstOrThrow
   */
  export type pageConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * Filter, which pageConfig to fetch.
     */
    where?: pageConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pageConfigs to fetch.
     */
    orderBy?: pageConfigOrderByWithRelationInput | pageConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pageConfigs.
     */
    cursor?: pageConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pageConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pageConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pageConfigs.
     */
    distinct?: PageConfigScalarFieldEnum | PageConfigScalarFieldEnum[]
  }

  /**
   * pageConfig findMany
   */
  export type pageConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * Filter, which pageConfigs to fetch.
     */
    where?: pageConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pageConfigs to fetch.
     */
    orderBy?: pageConfigOrderByWithRelationInput | pageConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pageConfigs.
     */
    cursor?: pageConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pageConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pageConfigs.
     */
    skip?: number
    distinct?: PageConfigScalarFieldEnum | PageConfigScalarFieldEnum[]
  }

  /**
   * pageConfig create
   */
  export type pageConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a pageConfig.
     */
    data: XOR<pageConfigCreateInput, pageConfigUncheckedCreateInput>
  }

  /**
   * pageConfig createMany
   */
  export type pageConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pageConfigs.
     */
    data: pageConfigCreateManyInput | pageConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pageConfig createManyAndReturn
   */
  export type pageConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many pageConfigs.
     */
    data: pageConfigCreateManyInput | pageConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pageConfig update
   */
  export type pageConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a pageConfig.
     */
    data: XOR<pageConfigUpdateInput, pageConfigUncheckedUpdateInput>
    /**
     * Choose, which pageConfig to update.
     */
    where: pageConfigWhereUniqueInput
  }

  /**
   * pageConfig updateMany
   */
  export type pageConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pageConfigs.
     */
    data: XOR<pageConfigUpdateManyMutationInput, pageConfigUncheckedUpdateManyInput>
    /**
     * Filter which pageConfigs to update
     */
    where?: pageConfigWhereInput
  }

  /**
   * pageConfig upsert
   */
  export type pageConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the pageConfig to update in case it exists.
     */
    where: pageConfigWhereUniqueInput
    /**
     * In case the pageConfig found by the `where` argument doesn't exist, create a new pageConfig with this data.
     */
    create: XOR<pageConfigCreateInput, pageConfigUncheckedCreateInput>
    /**
     * In case the pageConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pageConfigUpdateInput, pageConfigUncheckedUpdateInput>
  }

  /**
   * pageConfig delete
   */
  export type pageConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
    /**
     * Filter which pageConfig to delete.
     */
    where: pageConfigWhereUniqueInput
  }

  /**
   * pageConfig deleteMany
   */
  export type pageConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pageConfigs to delete
     */
    where?: pageConfigWhereInput
  }

  /**
   * pageConfig without action
   */
  export type pageConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pageConfig
     */
    select?: pageConfigSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    role: 'role',
    email: 'email',
    name: 'name',
    country: 'country',
    picture: 'picture',
    createdAt: 'createdAt',
    preferredColor: 'preferredColor',
    preferredLanguage: 'preferredLanguage'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TestimonyScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    rating: 'rating',
    title: 'title',
    featured: 'featured',
    userEmail: 'userEmail'
  };

  export type TestimonyScalarFieldEnum = (typeof TestimonyScalarFieldEnum)[keyof typeof TestimonyScalarFieldEnum]


  export const StatisticScalarFieldEnum: {
    id: 'id',
    countries: 'countries',
    satisfaction: 'satisfaction',
    teachers: 'teachers',
    students: 'students',
    courses: 'courses',
    classes: 'classes'
  };

  export type StatisticScalarFieldEnum = (typeof StatisticScalarFieldEnum)[keyof typeof StatisticScalarFieldEnum]


  export const PageConfigScalarFieldEnum: {
    id: 'id',
    description: 'description',
    address: 'address',
    phone: 'phone',
    email: 'email',
    color: 'color',
    language: 'language'
  };

  export type PageConfigScalarFieldEnum = (typeof PageConfigScalarFieldEnum)[keyof typeof PageConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PageColors'
   */
  export type EnumPageColorsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PageColors'>
    


  /**
   * Reference to a field of type 'PageColors[]'
   */
  export type ListEnumPageColorsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PageColors[]'>
    


  /**
   * Reference to a field of type 'Language'
   */
  export type EnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language'>
    


  /**
   * Reference to a field of type 'Language[]'
   */
  export type ListEnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    country?: StringFilter<"User"> | string
    picture?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    preferredColor?: EnumPageColorsFilter<"User"> | $Enums.PageColors
    preferredLanguage?: EnumLanguageFilter<"User"> | $Enums.Language
    testimonies?: TestimonyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    name?: SortOrder
    country?: SortOrder
    picture?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    preferredColor?: SortOrder
    preferredLanguage?: SortOrder
    testimonies?: TestimonyOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    name?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    country?: StringFilter<"User"> | string
    picture?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    preferredColor?: EnumPageColorsFilter<"User"> | $Enums.PageColors
    preferredLanguage?: EnumLanguageFilter<"User"> | $Enums.Language
    testimonies?: TestimonyListRelationFilter
  }, "id" | "email" | "name">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    name?: SortOrder
    country?: SortOrder
    picture?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    preferredColor?: SortOrder
    preferredLanguage?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    country?: StringWithAggregatesFilter<"User"> | string
    picture?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    preferredColor?: EnumPageColorsWithAggregatesFilter<"User"> | $Enums.PageColors
    preferredLanguage?: EnumLanguageWithAggregatesFilter<"User"> | $Enums.Language
  }

  export type TestimonyWhereInput = {
    AND?: TestimonyWhereInput | TestimonyWhereInput[]
    OR?: TestimonyWhereInput[]
    NOT?: TestimonyWhereInput | TestimonyWhereInput[]
    id?: StringFilter<"Testimony"> | string
    content?: StringFilter<"Testimony"> | string
    createdAt?: DateTimeFilter<"Testimony"> | Date | string
    rating?: IntFilter<"Testimony"> | number
    title?: StringNullableFilter<"Testimony"> | string | null
    featured?: BoolFilter<"Testimony"> | boolean
    userEmail?: StringFilter<"Testimony"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TestimonyOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
    title?: SortOrderInput | SortOrder
    featured?: SortOrder
    userEmail?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TestimonyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestimonyWhereInput | TestimonyWhereInput[]
    OR?: TestimonyWhereInput[]
    NOT?: TestimonyWhereInput | TestimonyWhereInput[]
    content?: StringFilter<"Testimony"> | string
    createdAt?: DateTimeFilter<"Testimony"> | Date | string
    rating?: IntFilter<"Testimony"> | number
    title?: StringNullableFilter<"Testimony"> | string | null
    featured?: BoolFilter<"Testimony"> | boolean
    userEmail?: StringFilter<"Testimony"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type TestimonyOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
    title?: SortOrderInput | SortOrder
    featured?: SortOrder
    userEmail?: SortOrder
    _count?: TestimonyCountOrderByAggregateInput
    _avg?: TestimonyAvgOrderByAggregateInput
    _max?: TestimonyMaxOrderByAggregateInput
    _min?: TestimonyMinOrderByAggregateInput
    _sum?: TestimonySumOrderByAggregateInput
  }

  export type TestimonyScalarWhereWithAggregatesInput = {
    AND?: TestimonyScalarWhereWithAggregatesInput | TestimonyScalarWhereWithAggregatesInput[]
    OR?: TestimonyScalarWhereWithAggregatesInput[]
    NOT?: TestimonyScalarWhereWithAggregatesInput | TestimonyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Testimony"> | string
    content?: StringWithAggregatesFilter<"Testimony"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Testimony"> | Date | string
    rating?: IntWithAggregatesFilter<"Testimony"> | number
    title?: StringNullableWithAggregatesFilter<"Testimony"> | string | null
    featured?: BoolWithAggregatesFilter<"Testimony"> | boolean
    userEmail?: StringWithAggregatesFilter<"Testimony"> | string
  }

  export type StatisticWhereInput = {
    AND?: StatisticWhereInput | StatisticWhereInput[]
    OR?: StatisticWhereInput[]
    NOT?: StatisticWhereInput | StatisticWhereInput[]
    id?: IntFilter<"Statistic"> | number
    countries?: IntFilter<"Statistic"> | number
    satisfaction?: IntFilter<"Statistic"> | number
    teachers?: IntFilter<"Statistic"> | number
    students?: IntFilter<"Statistic"> | number
    courses?: IntFilter<"Statistic"> | number
    classes?: IntFilter<"Statistic"> | number
  }

  export type StatisticOrderByWithRelationInput = {
    id?: SortOrder
    countries?: SortOrder
    satisfaction?: SortOrder
    teachers?: SortOrder
    students?: SortOrder
    courses?: SortOrder
    classes?: SortOrder
  }

  export type StatisticWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatisticWhereInput | StatisticWhereInput[]
    OR?: StatisticWhereInput[]
    NOT?: StatisticWhereInput | StatisticWhereInput[]
    countries?: IntFilter<"Statistic"> | number
    satisfaction?: IntFilter<"Statistic"> | number
    teachers?: IntFilter<"Statistic"> | number
    students?: IntFilter<"Statistic"> | number
    courses?: IntFilter<"Statistic"> | number
    classes?: IntFilter<"Statistic"> | number
  }, "id">

  export type StatisticOrderByWithAggregationInput = {
    id?: SortOrder
    countries?: SortOrder
    satisfaction?: SortOrder
    teachers?: SortOrder
    students?: SortOrder
    courses?: SortOrder
    classes?: SortOrder
    _count?: StatisticCountOrderByAggregateInput
    _avg?: StatisticAvgOrderByAggregateInput
    _max?: StatisticMaxOrderByAggregateInput
    _min?: StatisticMinOrderByAggregateInput
    _sum?: StatisticSumOrderByAggregateInput
  }

  export type StatisticScalarWhereWithAggregatesInput = {
    AND?: StatisticScalarWhereWithAggregatesInput | StatisticScalarWhereWithAggregatesInput[]
    OR?: StatisticScalarWhereWithAggregatesInput[]
    NOT?: StatisticScalarWhereWithAggregatesInput | StatisticScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Statistic"> | number
    countries?: IntWithAggregatesFilter<"Statistic"> | number
    satisfaction?: IntWithAggregatesFilter<"Statistic"> | number
    teachers?: IntWithAggregatesFilter<"Statistic"> | number
    students?: IntWithAggregatesFilter<"Statistic"> | number
    courses?: IntWithAggregatesFilter<"Statistic"> | number
    classes?: IntWithAggregatesFilter<"Statistic"> | number
  }

  export type pageConfigWhereInput = {
    AND?: pageConfigWhereInput | pageConfigWhereInput[]
    OR?: pageConfigWhereInput[]
    NOT?: pageConfigWhereInput | pageConfigWhereInput[]
    id?: IntFilter<"pageConfig"> | number
    description?: StringFilter<"pageConfig"> | string
    address?: StringFilter<"pageConfig"> | string
    phone?: StringFilter<"pageConfig"> | string
    email?: StringFilter<"pageConfig"> | string
    color?: EnumPageColorsFilter<"pageConfig"> | $Enums.PageColors
    language?: EnumLanguageFilter<"pageConfig"> | $Enums.Language
  }

  export type pageConfigOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    color?: SortOrder
    language?: SortOrder
  }

  export type pageConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: pageConfigWhereInput | pageConfigWhereInput[]
    OR?: pageConfigWhereInput[]
    NOT?: pageConfigWhereInput | pageConfigWhereInput[]
    description?: StringFilter<"pageConfig"> | string
    address?: StringFilter<"pageConfig"> | string
    phone?: StringFilter<"pageConfig"> | string
    email?: StringFilter<"pageConfig"> | string
    color?: EnumPageColorsFilter<"pageConfig"> | $Enums.PageColors
    language?: EnumLanguageFilter<"pageConfig"> | $Enums.Language
  }, "id">

  export type pageConfigOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    color?: SortOrder
    language?: SortOrder
    _count?: pageConfigCountOrderByAggregateInput
    _avg?: pageConfigAvgOrderByAggregateInput
    _max?: pageConfigMaxOrderByAggregateInput
    _min?: pageConfigMinOrderByAggregateInput
    _sum?: pageConfigSumOrderByAggregateInput
  }

  export type pageConfigScalarWhereWithAggregatesInput = {
    AND?: pageConfigScalarWhereWithAggregatesInput | pageConfigScalarWhereWithAggregatesInput[]
    OR?: pageConfigScalarWhereWithAggregatesInput[]
    NOT?: pageConfigScalarWhereWithAggregatesInput | pageConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"pageConfig"> | number
    description?: StringWithAggregatesFilter<"pageConfig"> | string
    address?: StringWithAggregatesFilter<"pageConfig"> | string
    phone?: StringWithAggregatesFilter<"pageConfig"> | string
    email?: StringWithAggregatesFilter<"pageConfig"> | string
    color?: EnumPageColorsWithAggregatesFilter<"pageConfig"> | $Enums.PageColors
    language?: EnumLanguageWithAggregatesFilter<"pageConfig"> | $Enums.Language
  }

  export type UserCreateInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    name: string
    country: string
    picture?: string | null
    createdAt?: Date | string
    preferredColor: $Enums.PageColors
    preferredLanguage: $Enums.Language
    testimonies?: TestimonyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    name: string
    country: string
    picture?: string | null
    createdAt?: Date | string
    preferredColor: $Enums.PageColors
    preferredLanguage: $Enums.Language
    testimonies?: TestimonyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredColor?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    testimonies?: TestimonyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredColor?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    testimonies?: TestimonyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    name: string
    country: string
    picture?: string | null
    createdAt?: Date | string
    preferredColor: $Enums.PageColors
    preferredLanguage: $Enums.Language
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredColor?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredColor?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
  }

  export type TestimonyCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    rating?: number
    title?: string | null
    featured?: boolean
    user: UserCreateNestedOneWithoutTestimoniesInput
  }

  export type TestimonyUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    rating?: number
    title?: string | null
    featured?: boolean
    userEmail: string
  }

  export type TestimonyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutTestimoniesNestedInput
  }

  export type TestimonyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type TestimonyCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    rating?: number
    title?: string | null
    featured?: boolean
    userEmail: string
  }

  export type TestimonyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestimonyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    userEmail?: StringFieldUpdateOperationsInput | string
  }

  export type StatisticCreateInput = {
    countries: number
    satisfaction: number
    teachers: number
    students: number
    courses: number
    classes: number
  }

  export type StatisticUncheckedCreateInput = {
    id?: number
    countries: number
    satisfaction: number
    teachers: number
    students: number
    courses: number
    classes: number
  }

  export type StatisticUpdateInput = {
    countries?: IntFieldUpdateOperationsInput | number
    satisfaction?: IntFieldUpdateOperationsInput | number
    teachers?: IntFieldUpdateOperationsInput | number
    students?: IntFieldUpdateOperationsInput | number
    courses?: IntFieldUpdateOperationsInput | number
    classes?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    countries?: IntFieldUpdateOperationsInput | number
    satisfaction?: IntFieldUpdateOperationsInput | number
    teachers?: IntFieldUpdateOperationsInput | number
    students?: IntFieldUpdateOperationsInput | number
    courses?: IntFieldUpdateOperationsInput | number
    classes?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticCreateManyInput = {
    id?: number
    countries: number
    satisfaction: number
    teachers: number
    students: number
    courses: number
    classes: number
  }

  export type StatisticUpdateManyMutationInput = {
    countries?: IntFieldUpdateOperationsInput | number
    satisfaction?: IntFieldUpdateOperationsInput | number
    teachers?: IntFieldUpdateOperationsInput | number
    students?: IntFieldUpdateOperationsInput | number
    courses?: IntFieldUpdateOperationsInput | number
    classes?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    countries?: IntFieldUpdateOperationsInput | number
    satisfaction?: IntFieldUpdateOperationsInput | number
    teachers?: IntFieldUpdateOperationsInput | number
    students?: IntFieldUpdateOperationsInput | number
    courses?: IntFieldUpdateOperationsInput | number
    classes?: IntFieldUpdateOperationsInput | number
  }

  export type pageConfigCreateInput = {
    description: string
    address: string
    phone: string
    email: string
    color?: $Enums.PageColors
    language?: $Enums.Language
  }

  export type pageConfigUncheckedCreateInput = {
    id?: number
    description: string
    address: string
    phone: string
    email: string
    color?: $Enums.PageColors
    language?: $Enums.Language
  }

  export type pageConfigUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    color?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
  }

  export type pageConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    color?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
  }

  export type pageConfigCreateManyInput = {
    id?: number
    description: string
    address: string
    phone: string
    email: string
    color?: $Enums.PageColors
    language?: $Enums.Language
  }

  export type pageConfigUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    color?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
  }

  export type pageConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    color?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumPageColorsFilter<$PrismaModel = never> = {
    equals?: $Enums.PageColors | EnumPageColorsFieldRefInput<$PrismaModel>
    in?: $Enums.PageColors[] | ListEnumPageColorsFieldRefInput<$PrismaModel>
    notIn?: $Enums.PageColors[] | ListEnumPageColorsFieldRefInput<$PrismaModel>
    not?: NestedEnumPageColorsFilter<$PrismaModel> | $Enums.PageColors
  }

  export type EnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type TestimonyListRelationFilter = {
    every?: TestimonyWhereInput
    some?: TestimonyWhereInput
    none?: TestimonyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TestimonyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    name?: SortOrder
    country?: SortOrder
    picture?: SortOrder
    createdAt?: SortOrder
    preferredColor?: SortOrder
    preferredLanguage?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    name?: SortOrder
    country?: SortOrder
    picture?: SortOrder
    createdAt?: SortOrder
    preferredColor?: SortOrder
    preferredLanguage?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    name?: SortOrder
    country?: SortOrder
    picture?: SortOrder
    createdAt?: SortOrder
    preferredColor?: SortOrder
    preferredLanguage?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumPageColorsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PageColors | EnumPageColorsFieldRefInput<$PrismaModel>
    in?: $Enums.PageColors[] | ListEnumPageColorsFieldRefInput<$PrismaModel>
    notIn?: $Enums.PageColors[] | ListEnumPageColorsFieldRefInput<$PrismaModel>
    not?: NestedEnumPageColorsWithAggregatesFilter<$PrismaModel> | $Enums.PageColors
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPageColorsFilter<$PrismaModel>
    _max?: NestedEnumPageColorsFilter<$PrismaModel>
  }

  export type EnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TestimonyCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    featured?: SortOrder
    userEmail?: SortOrder
  }

  export type TestimonyAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type TestimonyMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    featured?: SortOrder
    userEmail?: SortOrder
  }

  export type TestimonyMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    featured?: SortOrder
    userEmail?: SortOrder
  }

  export type TestimonySumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StatisticCountOrderByAggregateInput = {
    id?: SortOrder
    countries?: SortOrder
    satisfaction?: SortOrder
    teachers?: SortOrder
    students?: SortOrder
    courses?: SortOrder
    classes?: SortOrder
  }

  export type StatisticAvgOrderByAggregateInput = {
    id?: SortOrder
    countries?: SortOrder
    satisfaction?: SortOrder
    teachers?: SortOrder
    students?: SortOrder
    courses?: SortOrder
    classes?: SortOrder
  }

  export type StatisticMaxOrderByAggregateInput = {
    id?: SortOrder
    countries?: SortOrder
    satisfaction?: SortOrder
    teachers?: SortOrder
    students?: SortOrder
    courses?: SortOrder
    classes?: SortOrder
  }

  export type StatisticMinOrderByAggregateInput = {
    id?: SortOrder
    countries?: SortOrder
    satisfaction?: SortOrder
    teachers?: SortOrder
    students?: SortOrder
    courses?: SortOrder
    classes?: SortOrder
  }

  export type StatisticSumOrderByAggregateInput = {
    id?: SortOrder
    countries?: SortOrder
    satisfaction?: SortOrder
    teachers?: SortOrder
    students?: SortOrder
    courses?: SortOrder
    classes?: SortOrder
  }

  export type pageConfigCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    color?: SortOrder
    language?: SortOrder
  }

  export type pageConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type pageConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    color?: SortOrder
    language?: SortOrder
  }

  export type pageConfigMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    color?: SortOrder
    language?: SortOrder
  }

  export type pageConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TestimonyCreateNestedManyWithoutUserInput = {
    create?: XOR<TestimonyCreateWithoutUserInput, TestimonyUncheckedCreateWithoutUserInput> | TestimonyCreateWithoutUserInput[] | TestimonyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestimonyCreateOrConnectWithoutUserInput | TestimonyCreateOrConnectWithoutUserInput[]
    createMany?: TestimonyCreateManyUserInputEnvelope
    connect?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
  }

  export type TestimonyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TestimonyCreateWithoutUserInput, TestimonyUncheckedCreateWithoutUserInput> | TestimonyCreateWithoutUserInput[] | TestimonyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestimonyCreateOrConnectWithoutUserInput | TestimonyCreateOrConnectWithoutUserInput[]
    createMany?: TestimonyCreateManyUserInputEnvelope
    connect?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumPageColorsFieldUpdateOperationsInput = {
    set?: $Enums.PageColors
  }

  export type EnumLanguageFieldUpdateOperationsInput = {
    set?: $Enums.Language
  }

  export type TestimonyUpdateManyWithoutUserNestedInput = {
    create?: XOR<TestimonyCreateWithoutUserInput, TestimonyUncheckedCreateWithoutUserInput> | TestimonyCreateWithoutUserInput[] | TestimonyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestimonyCreateOrConnectWithoutUserInput | TestimonyCreateOrConnectWithoutUserInput[]
    upsert?: TestimonyUpsertWithWhereUniqueWithoutUserInput | TestimonyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TestimonyCreateManyUserInputEnvelope
    set?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
    disconnect?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
    delete?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
    connect?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
    update?: TestimonyUpdateWithWhereUniqueWithoutUserInput | TestimonyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TestimonyUpdateManyWithWhereWithoutUserInput | TestimonyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TestimonyScalarWhereInput | TestimonyScalarWhereInput[]
  }

  export type TestimonyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TestimonyCreateWithoutUserInput, TestimonyUncheckedCreateWithoutUserInput> | TestimonyCreateWithoutUserInput[] | TestimonyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestimonyCreateOrConnectWithoutUserInput | TestimonyCreateOrConnectWithoutUserInput[]
    upsert?: TestimonyUpsertWithWhereUniqueWithoutUserInput | TestimonyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TestimonyCreateManyUserInputEnvelope
    set?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
    disconnect?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
    delete?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
    connect?: TestimonyWhereUniqueInput | TestimonyWhereUniqueInput[]
    update?: TestimonyUpdateWithWhereUniqueWithoutUserInput | TestimonyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TestimonyUpdateManyWithWhereWithoutUserInput | TestimonyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TestimonyScalarWhereInput | TestimonyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTestimoniesInput = {
    create?: XOR<UserCreateWithoutTestimoniesInput, UserUncheckedCreateWithoutTestimoniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestimoniesInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutTestimoniesNestedInput = {
    create?: XOR<UserCreateWithoutTestimoniesInput, UserUncheckedCreateWithoutTestimoniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestimoniesInput
    upsert?: UserUpsertWithoutTestimoniesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTestimoniesInput, UserUpdateWithoutTestimoniesInput>, UserUncheckedUpdateWithoutTestimoniesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumPageColorsFilter<$PrismaModel = never> = {
    equals?: $Enums.PageColors | EnumPageColorsFieldRefInput<$PrismaModel>
    in?: $Enums.PageColors[] | ListEnumPageColorsFieldRefInput<$PrismaModel>
    notIn?: $Enums.PageColors[] | ListEnumPageColorsFieldRefInput<$PrismaModel>
    not?: NestedEnumPageColorsFilter<$PrismaModel> | $Enums.PageColors
  }

  export type NestedEnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumPageColorsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PageColors | EnumPageColorsFieldRefInput<$PrismaModel>
    in?: $Enums.PageColors[] | ListEnumPageColorsFieldRefInput<$PrismaModel>
    notIn?: $Enums.PageColors[] | ListEnumPageColorsFieldRefInput<$PrismaModel>
    not?: NestedEnumPageColorsWithAggregatesFilter<$PrismaModel> | $Enums.PageColors
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPageColorsFilter<$PrismaModel>
    _max?: NestedEnumPageColorsFilter<$PrismaModel>
  }

  export type NestedEnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TestimonyCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    rating?: number
    title?: string | null
    featured?: boolean
  }

  export type TestimonyUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    rating?: number
    title?: string | null
    featured?: boolean
  }

  export type TestimonyCreateOrConnectWithoutUserInput = {
    where: TestimonyWhereUniqueInput
    create: XOR<TestimonyCreateWithoutUserInput, TestimonyUncheckedCreateWithoutUserInput>
  }

  export type TestimonyCreateManyUserInputEnvelope = {
    data: TestimonyCreateManyUserInput | TestimonyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TestimonyUpsertWithWhereUniqueWithoutUserInput = {
    where: TestimonyWhereUniqueInput
    update: XOR<TestimonyUpdateWithoutUserInput, TestimonyUncheckedUpdateWithoutUserInput>
    create: XOR<TestimonyCreateWithoutUserInput, TestimonyUncheckedCreateWithoutUserInput>
  }

  export type TestimonyUpdateWithWhereUniqueWithoutUserInput = {
    where: TestimonyWhereUniqueInput
    data: XOR<TestimonyUpdateWithoutUserInput, TestimonyUncheckedUpdateWithoutUserInput>
  }

  export type TestimonyUpdateManyWithWhereWithoutUserInput = {
    where: TestimonyScalarWhereInput
    data: XOR<TestimonyUpdateManyMutationInput, TestimonyUncheckedUpdateManyWithoutUserInput>
  }

  export type TestimonyScalarWhereInput = {
    AND?: TestimonyScalarWhereInput | TestimonyScalarWhereInput[]
    OR?: TestimonyScalarWhereInput[]
    NOT?: TestimonyScalarWhereInput | TestimonyScalarWhereInput[]
    id?: StringFilter<"Testimony"> | string
    content?: StringFilter<"Testimony"> | string
    createdAt?: DateTimeFilter<"Testimony"> | Date | string
    rating?: IntFilter<"Testimony"> | number
    title?: StringNullableFilter<"Testimony"> | string | null
    featured?: BoolFilter<"Testimony"> | boolean
    userEmail?: StringFilter<"Testimony"> | string
  }

  export type UserCreateWithoutTestimoniesInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    name: string
    country: string
    picture?: string | null
    createdAt?: Date | string
    preferredColor: $Enums.PageColors
    preferredLanguage: $Enums.Language
  }

  export type UserUncheckedCreateWithoutTestimoniesInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    name: string
    country: string
    picture?: string | null
    createdAt?: Date | string
    preferredColor: $Enums.PageColors
    preferredLanguage: $Enums.Language
  }

  export type UserCreateOrConnectWithoutTestimoniesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTestimoniesInput, UserUncheckedCreateWithoutTestimoniesInput>
  }

  export type UserUpsertWithoutTestimoniesInput = {
    update: XOR<UserUpdateWithoutTestimoniesInput, UserUncheckedUpdateWithoutTestimoniesInput>
    create: XOR<UserCreateWithoutTestimoniesInput, UserUncheckedCreateWithoutTestimoniesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTestimoniesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTestimoniesInput, UserUncheckedUpdateWithoutTestimoniesInput>
  }

  export type UserUpdateWithoutTestimoniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredColor?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
  }

  export type UserUncheckedUpdateWithoutTestimoniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferredColor?: EnumPageColorsFieldUpdateOperationsInput | $Enums.PageColors
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
  }

  export type TestimonyCreateManyUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    rating?: number
    title?: string | null
    featured?: boolean
  }

  export type TestimonyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestimonyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestimonyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TestimonyDefaultArgs instead
     */
    export type TestimonyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TestimonyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatisticDefaultArgs instead
     */
    export type StatisticArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatisticDefaultArgs<ExtArgs>
    /**
     * @deprecated Use pageConfigDefaultArgs instead
     */
    export type pageConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = pageConfigDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}